q
value_scale.index('1') > value_scale.index('6')
value_scale.index('6')
value_scale.index('1')
q
c
q
compare_numbers(cards[0], cards[1]).size == 2
compare_suits(cards[0], cards[1], trump)
compare_numbers(cards[0], cards[1])
compare_numbers(cards[0], cards[1]).size
n
trump
n
trump
cards
n
line
n
line
n
compare_suits(cards[0], cards[1], trump)
n
q
y
File.size
File.lines.count
File.lines
idx
line
q
distances
q
b.values.map(&:to_i)
b = {"a"=>'3', "b"=>'5', "c"=>'7'}
a
line.sort_by { |town, distance| distance }
line
a = ['a'=>3, 'b'=> 5, 'c'=> 7 ].sort_by {|k, v| v}.reverse
a = ['a'=>3, 'b'=> 5, 'c'=> 7 ].sort_by {|k, v| v}
}
a = ['a'=>3, 'b'=> 5, 'c'=> 7 }.sort_by {|k, v| v}
line
distances
line
n
line.join
line
n
line
el
c
el
c
el
c
el
c
el
c
el
c
el
n
keys[el]
el
n
el
line
n
el
el.to_i.to_s == el
.to_i.to_s == el
el
n
el
n
el
n
el
c
el
line
n
word
new_line
n
line
arr[0..i]
arr[i+1...arr.length]
puts i
i
arr
c
line
temp
c
line
c
line
c
line
temp
c
line
line.shift
line.any?
line
n
temp.include? line.first
line.first
line.first?
temp
c
temp
c
temp
c
hash
temp
c
temp
hash
n
temp
temo
n
temp
n
hash
temp
q
line
temp.join
temp
q
temp
hash
c
hash
n
temp
hash
c
n
temp
line.first
hash
n
temp
hash
n
hash
temp
n
temp
line
q
line
c
n
to_add
n
to_add
n
ids_with_labels
n
ids_with_labels
data
q
data["menu"]["items"]
data["menu"]
q
frequency.sort
place.select { |position, value| value > 0 }.sort 
place
frequency
n
place
n
place
frequency
n
f
place
n
frequency
n
place
frequency
n
place
n
frequency
n
frequency
q
not_happy
n
number
not_happy
number
n
number
n
number
display
number
n
number
n
number
n
number
n
number
n
number
n
number
n
number
n
number
q
line
n
line
n
letter
result
n
result
n
result
n
character
letter
result
